<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.iwannnn.blog.mapper.BlogUserLikeMapper">
    
    <resultMap type="BlogUserLike" id="BlogUserLikeResult">
        <result property="id"    column="id"    />
        <result property="userId"    column="user_id"    />
        <result property="articleId"    column="article_id"    />
        <result property="isDelete"    column="is_delete"    />
        <result property="commentId"    column="comment_id"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
        <result property="temark"    column="temark"    />
    </resultMap>

    <sql id="selectBlogUserLikeVo">
        select id, user_id, article_id, is_delete, comment_id, create_time, update_time, temark from blog_user_like
    </sql>

    <select id="selectBlogUserLikeList" parameterType="BlogUserLike" resultMap="BlogUserLikeResult">
        <include refid="selectBlogUserLikeVo"/>
        <where>  
            <if test="userId != null "> and user_id = #{userId}</if>
            <if test="articleId != null "> and article_id = #{articleId}</if>
            <if test="isDelete != null "> and is_delete = #{isDelete}</if>
            <if test="commentId != null "> and comment_id = #{commentId}</if>
            <if test="temark != null  and temark != ''"> and temark = #{temark}</if>
        </where>
    </select>
    
    <select id="selectBlogUserLikeById" parameterType="Long" resultMap="BlogUserLikeResult">
        <include refid="selectBlogUserLikeVo"/>
        where id = #{id}
    </select>
        
    <insert id="insertBlogUserLike" parameterType="BlogUserLike" useGeneratedKeys="true" keyProperty="id">
        insert into blog_user_like
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="articleId != null">article_id,</if>
            <if test="isDelete != null">is_delete,</if>
            <if test="commentId != null">comment_id,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="temark != null">temark,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="articleId != null">#{articleId},</if>
            <if test="isDelete != null">#{isDelete},</if>
            <if test="commentId != null">#{commentId},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="temark != null">#{temark},</if>
         </trim>
    </insert>

    <update id="updateBlogUserLike" parameterType="BlogUserLike">
        update blog_user_like
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="articleId != null">article_id = #{articleId},</if>
            <if test="isDelete != null">is_delete = #{isDelete},</if>
            <if test="commentId != null">comment_id = #{commentId},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="temark != null">temark = #{temark},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteBlogUserLikeById" parameterType="Long">
        delete from blog_user_like where id = #{id}
    </delete>

    <delete id="deleteBlogUserLikeByIds" parameterType="String">
        delete from blog_user_like where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>